@page "/login"
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using Domain.DTOs
@using Domain.Models
@using System.Reflection

@inject IUserService userService;
@inject NavigationManager navManager;


<html>
<body>

<div class="row d-flex justify-content-center">
    <div class="col-md-6">
        <h3 id="header">Login</h3>
    </div>
</div>

<AuthorizeView>
    <NotAuthorized>
        <div class="container">
            <div class="card">
                <div class="row d-flex justify-content-center">
                    <div class="col-md-6">
                        <div class="form-group field">
                            <label>Username:</label>
                            <input id="inputCpr" type="text" class="form-control" @bind="userName" @bind:event="oninput"/>
                        </div>
                    </div>
                </div>

                <div class="row d-flex justify-content-center">
                    <div class="col-md-6">
                        <div class="form-group field">
                            <label>Password:</label>
                            <input id="inputPassword" type="password" class="form-control" @bind="password" @bind:event="oninput"/>
                        </div>
                    </div>
                </div>
                <div class="row d-flex justify-content-center">
                    <div class="col-md-12">
                        @if (!string.IsNullOrEmpty(resultMsg))
                        {
                            <label style="color: @color">@resultMsg</label>
                        }
                        <div class="col-md-12">
                            <button @onclick="LoginAsync" disabled="@IsLoginButtonDisabled" class="acceptbtn">Login</button>
                            <a id="NewUser" href="/register">New user?</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <div class="card">
            <h3>You are already logged in!</h3>
            <div class="button-row">
                <button @onclick="Logout" class="acceptbtn">Logout</button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

<script>
    document.addEventListener(
      "keydown",
      (event) => {
        const keyName = event.key;
    
        if (keyName === "Enter") {
          DotNet.invokeMethodAsync('BlazorApp','LoginAsync');
        }});
</script>

</body>
</html>


@code {
    private string userName { get; set;}
    private string password { get; set; }
    private string resultMsg = "";
    private string color = "";
    
    
    private bool IsLoginButtonDisabled => string.IsNullOrWhiteSpace(userName) || string.IsNullOrWhiteSpace(password);

    [JSInvokable]
    public async Task LoginAsync()
    {
        try
        {
            await userService.ValidateUser(userName, password);
            userName = "";
            password = "";
            resultMsg = "Logged in successfully.";
            color = "green";
            navManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
        
    }

    private async Task Logout()
    {
        await userService.Logout();
        navManager.NavigateTo("/", forceLoad: true);
    }
}