@page "/register"
@using Domain.DTOs
@using HttpClients.ClientInterfaces

@inject IUserService userService;
@inject NavigationManager navManager;

<AuthorizeView>
    <NotAuthorized>
        <div class="container mb-5">
            <div class="card">
                <div class="row d-flex justify-content-center">
                    <div class="col-md-12 pb-3">
                        <h1 class="text-center fs-1 fw-bold">Register</h1>
                    </div>
                </div>
                
                <div class="row d-flex justify-content-center">
                    <div class="col-md-6">
                        <div class="form-group field text-start">
                            <label>First Name</label>
                            <input id="inputFirstName" type="text" class="form-control" @bind="firstName" @bind:event="oninput"/>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group field text-start">
                            <label>Last Name</label>
                            <input id="inputLastName" type="text" class="form-control" @bind="lastName" @bind:event="oninput"/>
                        </div>
                    </div>
                </div>

                <div class="row d-flex justify-content-center pt-3">
                    <div class="col-md-12">
                        <div class="form-group field text-start">
                            <label>Email</label>
                            <input id="inputEmail" type="text" class="form-control" @bind="email" @bind:event="oninput"/>
                        </div>
                    </div>
                </div>

                <div class="row d-flex justify-content-center pt-3">
                    <div class="col-md-12">
                        <div class="form-group field text-start">
                            <label>Password</label>
                            <input id="inputPassword" type="password" class="form-control" @bind="password" @bind:event="oninput"/>
                        </div>
                    </div>
                </div>

                <div class="row d-flex justify-content-center pt-3">
                    <div class="col-md-12">
                        <div class="form-group field text-start">
                            <label>Username</label>
                            <input id="inputUsernameNumber" type="text" class="form-control" @bind="userName" @bind:event="oninput"/>
                        </div>
                    </div>
                </div>

                <div class="row d-flex justify-content-center pt-3">
                    <div class="col-md-12">
                        <div class="form-group field text-start">
                            <label>Phone Number</label>
                            <input id="inputPhoneNumber" type="text" class="form-control" @bind="phoneNumber" @bind:event="oninput"/>
                        </div>
                    </div>
                </div>

                <div class="row d-flex justify-content-center pt-3">
                    <div class="col-md-12">
                        <div class="button-row">
                            <button data-testid="createUser" id="createUser" @onclick="Create" disabled="@IsRegisterButtonDisabled" class="acceptbtn w-100">Register</button>
                        </div>
                        @if (!string.IsNullOrEmpty(resultMsg))
                        {
                            <label class="pt-3" style="color: @color">@resultMsg</label>
                        }
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <div class="card">
            <h3>You are already logged in!</h3>
            <div class="button-row">
                <button @onclick="Logout" class="acceptbtn">Logout</button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    public string firstName = "";
    public string lastName = "";
    public string email = "";
    public string password = "";
    public string userName;
    public long phoneNumber;
    public bool isAdmin;
    public string resultMsg = "";
    public string color = "";
    
    public bool IsRegisterButtonDisabled => string.IsNullOrWhiteSpace(userName) || string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(firstName) || string.IsNullOrWhiteSpace(lastName);

    
    private async Task Create()
    {
        resultMsg = "";
        
        if (phoneNumber <= 0) {
            resultMsg = "Phone number cannot be 0 or negative";
            color = "red";
            return;
        }

        try
        {
            await userService.CreateAsync(new UserCreationDto(firstName, lastName, email, password, userName, phoneNumber, isAdmin));
            await userService.ValidateUser(userName, password);
            firstName = "";
            lastName = "";
            email = "";
            password = "";
            userName = "";
            phoneNumber = 0;
            isAdmin = false;
            resultMsg = "User successfully created";
            color = "green";
            navManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }

    private async Task Logout()
    {
        await userService.Logout();
        navManager.NavigateTo("/");
    }
}