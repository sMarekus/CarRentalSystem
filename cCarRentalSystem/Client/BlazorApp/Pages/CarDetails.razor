@page "/cars/{carId:int}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Runtime.InteropServices.JavaScript
@using Domain.DTOs
@inject ICarService carService;
@inject AuthenticationStateProvider StateProvider;
@inject IReservationService reserveService;
@inject IUserService userService;
@inject NavigationManager navMgr;

@if (car != null)
{
    <div class="carDetails">
        <div class="carModel">
            <h3 class="fs-1">@car.Brand @car.Model</h3>
        </div>
        <div class="restOfDetails">
            <p>@car.Description</p>
            <p>Color: @car.Color</p>
            <p>Gearbox: @car.Gearbox</p>
            <p>Body type: @car.BodyType</p>
            <p>Fuel type: @car.FuelType</p>
            <p>Horsepower: @car.HorsePower</p>
            <p><span class="fs-2">@car.PricePerDay</span> € / Day</p>
            @if (isAdmin)
            {
                <a href="/cars/@car.Id/edit">
                    <button class="btn btn-secondary">Edit car</button>
                </a>
                <a href="CarHistory/@car.Id">
                    <button class="btn btn-secondary">Car History</button>
                </a>
                <button class="btn btn-success" id="openBtn">Reserve</button>
            }
        </div>
    </div>
}
else
{
    <p>Car not found.</p>
}

<div id="popup" class="popup">
    <div class="popup-content">
        <div class="container justify-content-center">
            <div class="card">
                <div class="row d-flex justify-content-center">
                    <div class="col-md-12">
                        <div class="form-group field">
                            <label>Pickup date:</label>
                            <input id="inputStart" type="date" min="@GetCurrentDate()" class="form-control" @bind="pickup" @bind:event="oninput"/>
                        </div>
                    </div>
                </div>
            
                <div class="row d-flex justify-content-center">
                    <div class="col-md-12">
                        <div class="form-group field">
                            <label>End of rental period:</label>
                            <input id="inputEnd" type="date" class="form-control" @bind="returnDate" @bind:event="oninput"/>
                        </div>
                    </div>
                </div>
                <div>
                    <p>Estimated Price: @estimatedPrice €</p>
                </div>
                <p>*Minimum rental period: 3 days</p>
                <AuthorizeView>
                    <Authorized>
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <p class="error-message">@errorMessage</p>
                        }
                        <button class="reserve-btn" id="reserveBtn" @onclick="Reserve">Reserve</button>
                    </Authorized>
                    <NotAuthorized>
                        <label>Please log in to reserve.</label>
                    </NotAuthorized>
                </AuthorizeView>
                <span class="close-btn" id="closeBtn">&times;</span>
            </div>
        </div>
    </div>
</div>

<script src="reserveScript.js"></script>

@code {
    [Parameter]
    public int carId { get; set; }
    
    private bool isAdmin;
    
    private Car car;
    private string msg = "";
    private string? currentUser = "";
    
    private int estimatedPrice = 0;
    
    private DateTime _pickup;
    private DateTime _returnDate;
    
    private DateTime pickup
    {
        get => _pickup;
        set
        {
            if (_pickup != value)
            {
                _pickup = value;
                UpdateEstimatedPrice();
            }
        }
    }

    private DateTime returnDate
    {
        get => _returnDate;
        set
        {
            if (_returnDate != value)
            {
                _returnDate = value;
                UpdateEstimatedPrice();
            }
        }
    }
    
    private async Task<bool> CheckAdminStatus()
    {
        var authState = await StateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user?.Identity != null && user.Identity.IsAuthenticated)
        {
            return user.HasClaim(c => c.Type == "isAdmin" && c.Value == "True");
        }
        return false;
    }

    private void UpdateEstimatedPrice()
    {
        if (pickup != default && returnDate != default && returnDate > pickup)
        {
            int numOfDays = (returnDate - pickup).Days;
            estimatedPrice = numOfDays * car.PricePerDay;
        }
        else
        {
            estimatedPrice = 0;
        }
    }
    
    private string errorMessage = ""; 

    protected override async Task OnInitializedAsync()
    {
        isAdmin = await CheckAdminStatus();
        try
        {
            car = await carService.GetCarById(carId);

            if (car == null)
            {
                msg = "Car not found.";
            }
        }
        catch (Exception e)
        {
            msg = "There was a problem fetching the selected car.";
            Console.WriteLine(e);
        }
    }
    
    private static DateTime GetCurrentDate()
    {
        DateTime currentDate = DateTime.Now;
        return currentDate;
    }

    private void SetReservationDates(DateTime pickup, DateTime returnDate)
    {
        this.pickup = (pickup.Date).AddDays(1);
        this.returnDate = (returnDate.Date).AddDays(1);
    }

    private async Task<Reservation> Reserve()
    {
        ValidateDateInput(pickup, returnDate);
        SetReservationDates(pickup, returnDate);
        await GetLoggedInUserId();

        bool isAvailable = await reserveService.IsCarAvailable(carId, _pickup, _returnDate);
        if (!isAvailable)
        {
            errorMessage = "Car is not available for the selected dates.";
            return null;
        }

        ReservationCreationDTO dto = new ReservationCreationDTO(carId, currentUser, pickup, returnDate, CalculateTotalPrice(pickup, returnDate, car.PricePerDay), false);
        navMgr.NavigateTo("/cars");
        return await reserveService.CreateAsync(dto);
    }

    private void ValidateDateInput(DateTime start, DateTime end)
    {
        TimeSpan timeDifference = end - start;
        TimeSpan minimumPeriod = TimeSpan.FromDays(3);
        DateTime currentDate = GetCurrentDate();

        if (timeDifference < minimumPeriod)
        {
            Console.WriteLine("Error: The rental period must be at least one week.");
        }
        if (start < currentDate)
        {
            Console.WriteLine("Cannot select earlier start date than today!");
        }
        else
        {
            Console.WriteLine("Rental period is valid.");
        }
    }

    private int CalculateTotalPrice(DateTime startDate, DateTime endDate, int pricePerDay)
    {
        int numOfDays = (endDate - startDate).Days;
        return numOfDays * pricePerDay;
    }

    private async Task<string> GetLoggedInUserId()
    {
        AuthenticationState state = await StateProvider.GetAuthenticationStateAsync();
        currentUser = state.User.Claims.FirstOrDefault(claim => claim.Type.Equals("username"))!.Value.ToString();
        return currentUser;
    }
}