@page "/users"
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IUserService userService;
@attribute [Authorize(Policy = "MustBeAdmin")]

@if (!string.IsNullOrEmpty(msg))
{
    <div class="alert alert-info">
        <span>@msg</span>
    </div>
}

@if (users == null)
{
    <div class="text-center">
        <span>Loading..</span>
    </div>
}
else if (!users.Any())
{
    <div class="text-center">
        <span>No users to be found</span>
    </div>
}
else
{
    <div class="users-container">
        <table class="table table-hover">
            <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Username</th>
                <th>Phone Number</th>
                <th>Is Admin</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (User user in users)
            {
                <tr>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.UserName</td>
                    <td>@user.PhoneNumber</td>
                    <td>@(user.IsAdmin ? "Yes" : "No")</td>
                    <td>
                        <a class="btn btn-primary" href="users/@user.UserName/edit">Edit</a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<User>? users;
    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}